package controller;

import dao.EmployeeDAO;
import model.Employee;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Date;
import java.util.List;

@WebServlet("/employee")
public class EmployeeServlet extends HttpServlet {
    private EmployeeDAO employeeDAO;

    @Override
    public void init() throws ServletException {
        employeeDAO = new EmployeeDAO();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");
        
        String action = request.getParameter("action");
        
        if (action == null) {
            action = "list";
        }

        switch (action) {
            case "list":
                listEmployees(request, response);
                break;
            case "create":
                showCreateForm(request, response);
                break;
            case "edit":
                showEditForm(request, response);
                break;
            case "delete":
                deleteEmployee(request, response);
                break;
            default:
                listEmployees(request, response);
                break;
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        response.setCharacterEncoding("UTF-8");
        
        String action = request.getParameter("action");

        if ("create".equals(action)) {
            createEmployee(request, response);
        } else if ("update".equals(action)) {
            updateEmployee(request, response);
        }
    }

    
    private void listEmployees(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        List<Employee> employees = employeeDAO.getAllEmployees();
        request.setAttribute("employees", employees);
        request.getRequestDispatcher("/views/employee-list.jsp").forward(request, response);
    }

    
    private void showCreateForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.getRequestDispatcher("/views/employee-form.jsp").forward(request, response);
    }

    
    private void showEditForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        Employee employee = employeeDAO.getEmployeeById(id);
        request.setAttribute("employee", employee);
        request.getRequestDispatcher("/views/employee-form.jsp").forward(request, response);
    }

    
    private void createEmployee(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            Employee emp = new Employee();
            emp.setEmployeeCode(request.getParameter("employeeCode"));
            emp.setFullName(request.getParameter("fullName"));
            emp.setDateOfBirth(Date.valueOf(request.getParameter("dateOfBirth")));
            emp.setGender(request.getParameter("gender"));
            emp.setEmail(request.getParameter("email"));
            emp.setPhone(request.getParameter("phone"));
            emp.setAddress(request.getParameter("address"));
            emp.setPosition(request.getParameter("position"));
            emp.setDepartment(request.getParameter("department"));
            emp.setHireDate(Date.valueOf(request.getParameter("hireDate")));
            emp.setSalary(new BigDecimal(request.getParameter("salary")));
            emp.setStatus(request.getParameter("status"));

            if (employeeDAO.isEmployeeCodeExists(emp.getEmployeeCode(), 0)) {
                request.setAttribute("error", "Mã nhân viên đã tồn tại!");
                request.setAttribute("employee", emp);
                request.getRequestDispatcher("/views/employee-form.jsp").forward(request, response);
                return;
            }

            boolean success = employeeDAO.addEmployee(emp);
            
            if (success) {
                response.sendRedirect(request.getContextPath() + "/employee?action=list&success=create");
            } else {
                request.setAttribute("error", "Thêm nhân viên thất bại!");
                request.setAttribute("employee", emp);
                request.getRequestDispatcher("/views/employee-form.jsp").forward(request, response);
            }
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "Có lỗi xảy ra: " + e.getMessage());
            request.getRequestDispatcher("/views/employee-form.jsp").forward(request, response);
        }
    }

    
    private void updateEmployee(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            Employee emp = new Employee();
            emp.setId(Integer.parseInt(request.getParameter("id")));
            emp.setEmployeeCode(request.getParameter("employeeCode"));
            emp.setFullName(request.getParameter("fullName"));
            emp.setDateOfBirth(Date.valueOf(request.getParameter("dateOfBirth")));
            emp.setGender(request.getParameter("gender"));
            emp.setEmail(request.getParameter("email"));
            emp.setPhone(request.getParameter("phone"));
            emp.setAddress(request.getParameter("address"));
            emp.setPosition(request.getParameter("position"));
            emp.setDepartment(request.getParameter("department"));
            emp.setHireDate(Date.valueOf(request.getParameter("hireDate")));
            emp.setSalary(new BigDecimal(request.getParameter("salary")));
            emp.setStatus(request.getParameter("status"));

            if (employeeDAO.isEmployeeCodeExists(emp.getEmployeeCode(), emp.getId())) {
                request.setAttribute("error", "Mã nhân viên đã tồn tại!");
                request.setAttribute("employee", emp);
                request.getRequestDispatcher("/views/employee-form.jsp").forward(request, response);
                return;
            }

            boolean success = employeeDAO.updateEmployee(emp);
            
            if (success) {
                response.sendRedirect(request.getContextPath() + "/employee?action=list&success=update");
            } else {
                request.setAttribute("error", "Cập nhật nhân viên thất bại!");
                request.setAttribute("employee", emp);
                request.getRequestDispatcher("/views/employee-form.jsp").forward(request, response);
            }
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("error", "Có lỗi xảy ra: " + e.getMessage());
            request.getRequestDispatcher("/views/employee-form.jsp").forward(request, response);
        }
    }

    
    private void deleteEmployee(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        boolean success = employeeDAO.deleteEmployee(id);
        
        if (success) {
            response.sendRedirect(request.getContextPath() + "/employee?action=list&success=delete");
        } else {
            response.sendRedirect(request.getContextPath() + "/employee?action=list&error=delete");
        }
    }
}