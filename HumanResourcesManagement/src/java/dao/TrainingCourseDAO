package dao;

import model.TrainingCourse;
import util.DBUtil;

import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class TrainingCourseDAO {

    public List<TrainingCourse> getAllCourses() {
        List<TrainingCourse> list = new ArrayList<>();
        String sql = "SELECT * FROM training_course";

        try (Connection conn = DBUtil.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                TrainingCourse c = new TrainingCourse(
                        rs.getInt("id"),
                        rs.getString("course_name"),
                        rs.getString("description"),
                        rs.getString("instructor"),
                        rs.getDate("start_date").toLocalDate(),
                        rs.getDate("end_date").toLocalDate(),
                        rs.getInt("duration_hours"),
                        rs.getBoolean("active")
                );
                list.add(c);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    public void insertCourse(TrainingCourse c) {
        String sql = "INSERT INTO training_course(course_name, description, instructor, start_date, end_date, duration_hours, active) VALUES (?, ?, ?, ?, ?, ?, ?)";
        try (Connection conn = DBUtil.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, c.getCourseName());
            ps.setString(2, c.getDescription());
            ps.setString(3, c.getInstructor());
            ps.setDate(4, Date.valueOf(c.getStartDate()));
            ps.setDate(5, Date.valueOf(c.getEndDate()));
            ps.setInt(6, c.getDurationHours());
            ps.setBoolean(7, c.isActive());
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public TrainingCourse getCourseById(int id) {
        String sql = "SELECT * FROM training_course WHERE id=?";
        try (Connection conn = DBUtil.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return new TrainingCourse(
                        rs.getInt("id"),
                        rs.getString("course_name"),
                        rs.getString("description"),
                        rs.getString("instructor"),
                        rs.getDate("start_date").toLocalDate(),
                        rs.getDate("end_date").toLocalDate(),
                        rs.getInt("duration_hours"),
                        rs.getBoolean("active")
                );
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public void updateCourse(TrainingCourse c) {
        String sql = "UPDATE training_course SET course_name=?, description=?, instructor=?, start_date=?, end_date=?, duration_hours=?, active=? WHERE id=?";
        try (Connection conn = DBUtil.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, c.getCourseName());
            ps.setString(2, c.getDescription());
            ps.setString(3, c.getInstructor());
            ps.setDate(4, Date.valueOf(c.getStartDate()));
            ps.setDate(5, Date.valueOf(c.getEndDate()));
            ps.setInt(6, c.getDurationHours());
            ps.setBoolean(7, c.isActive());
            ps.setInt(8, c.getId());
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void deleteCourse(int id) {
        String sql = "DELETE FROM training_course WHERE id=?";
        try (Connection conn = DBUtil.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
